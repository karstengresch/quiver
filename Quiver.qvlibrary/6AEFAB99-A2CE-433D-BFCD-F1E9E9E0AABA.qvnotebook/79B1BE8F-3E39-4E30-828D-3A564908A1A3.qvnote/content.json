{
  "title": "UISearchController",
  "cells": [
    {
      "type": "code",
      "language": "swift",
      "data": "@IBOutlet var tableView: UITableView! // We're going to deal w/ UITableView here.\n@IBOutlet var searchFooter: SearchFooter! // For showing a result summary\n\nvar domainObjects = [DomainObject]()\nlet searchController = UISearchController(searchResultsController: nil)"
    },
    {
      "type": "text",
      "data": "Your main view is a simple UIViewController and needs to conform to these protocols:"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "class SearchViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UISearchResultsUpdating, UISearchBarDelegate { \n// stuff to follow\n}"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "extension MasterViewController: UISearchResultsUpdating {\n    \n    func updateSearchResults(for searchController: UISearchController) {\n      let searchBar = searchController.searchBar\n      let scope = searchBar.scopeButtonTitles![searchBar.selectedScopeButtonIndex]\n      filterContentForSearchText(searchController.searchBar.text!, scope: scope)\n  }\n\n}"
    },
    {
      "type": "text",
      "data": "Next, set up the search controller in viewDidLoad()"
    },
    {
      "type": "code",
      "language": "swift",
      "data": " // Setup the Search Controller\n  searchController.searchResultsUpdater = self\n  searchController.obscuresBackgroundDuringPresentation = false\n  searchController.searchBar.placeholder = \"My Find Placeholder\"\n  navigationItem.searchController = searchController\n  definesPresentationContext = true\n  // Setup the Scope Bar\n  searchController.searchBar.scopeButtonTitles = [\"All\", \"Domain1\", \"Domain2\", \"Domain3\"]\n  searchController.searchBar.delegate = self\n  // Setup the results\n  tableView.tableFooterView = searchFooter"
    },
    {
      "type": "text",
      "data": "<ol style=\"border: 0px; font-family: &quot;Open Sans&quot;, sans-serif; margin: 0px 0px 11px 30px; outline: 0px; padding: 0px; vertical-align: baseline; list-style-position: initial; list-style-image: initial; color: rgb(0, 0, 0);\"><li style=\"border: 0px; font-family: inherit; font-style: inherit; margin: 0px 0px 10px; outline: 0px; padding: 0px; vertical-align: baseline;\"><font size=\"2\"><code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">searchResultsUpdater</code>&nbsp;is a property on&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">UISearchController</code>&nbsp;that conforms to the new protocol&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">UISearchResultsUpdating</code>. This protocol allows your class to be informed as text changes within the&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">UISearchBar</code>.</font></li><li style=\"border: 0px; font-family: inherit; font-style: inherit; margin: 0px 0px 10px; outline: 0px; padding: 0px; vertical-align: baseline;\">By default,&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">UISearchController</code>&nbsp;will obscure the view it is presented over. This is useful if you are using another view controller for&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">searchResultsController</code>. In this instance, you have set the current view to show the results, so you do not want to obscure your view.</li><li style=\"border: 0px; font-family: inherit; font-style: inherit; margin: 0px 0px 10px; outline: 0px; padding: 0px; vertical-align: baseline;\">Set the placeholder to something specific to this app</li><li style=\"border: 0px; font-family: inherit; font-style: inherit; margin: 0px 0px 10px; outline: 0px; padding: 0px; vertical-align: baseline;\"><span style=\"border: 0px; font-family: inherit; font-style: inherit; font-weight: bold; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">New for iOS 11</span>, you add the&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">searchBar</code>&nbsp;to the&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">NavigationItem</code>. This is necessary as Interface Builder is not yet compatible with&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">UISearchController</code>.</li><li style=\"border: 0px; font-family: inherit; font-style: inherit; margin: 0px 0px 10px; outline: 0px; padding: 0px; vertical-align: baseline;\">Finally, by setting&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">definesPresentationContext</code>&nbsp;on your view controller to&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">true</code>, you ensure that the search bar does not remain on the screen if the user navigates to another view controller while the&nbsp;<code style=\"border: 0px; font-family: &quot;Droid Sans Mono&quot;, sans-serif; font-style: inherit; font-weight: bold; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(0, 104, 55);\">UISearchController</code>&nbsp;is active.</li></ol>"
    },
    {
      "type": "text",
      "data": "The search bar should show up but won't be functional."
    },
    {
      "type": "code",
      "language": "swift",
      "data": "var filteredDomainObjects = [DomainObject]()"
    },
    {
      "type": "text",
      "data": "The above for the result list."
    },
    {
      "type": "code",
      "language": "swift",
      "data": "// MARK: - Private instance methods\nfunc searchBarIsEmpty() -> Bool {\n  return searchController.searchBar.text?.isEmpty ?? true\n}\n  \nfunc filterContentForSearchText(_ searchText: String, scope: String = \"All\") {\n  filteredDomainObjects = domainObjects.filter({( domainObject : DomainObject) -> Bool in\n    let doesCategoryMatch = (scope == \"All\") || (domainObject.category == scope) // considering scope bar, see below\n      \n    if searchBarIsEmpty() {\n      return doesCategoryMatch\n    } else {\n      return doesCategoryMatch && domainObject.name.lowercased().contains(searchText.lowercased())\n    }\n  })\n  tableView.reloadData()\n}"
    },
    {
      "type": "text",
      "data": "Indicate that filtering is currently done (here already considering the scope bar):"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func isFiltering() -> Bool {\n  let searchBarScopeIsFiltering = searchController.searchBar.selectedScopeButtonIndex != 0\n  return searchController.isActive && (!searchBarIsEmpty() || searchBarScopeIsFiltering)\n}"
    },
    {
      "type": "text",
      "data": "Now limit the output on the table view to the amount of matches."
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n  if isFiltering() {\n    searchFooter.setIsFilteringToShow(filteredItemCount: filteredDomainObjects.count, of: domainObjects.count)\n    return domainObjects.count\n  }\n    \n  searchFooter.setNotFiltering()\n  return domainObjects.count\n}"
    },
    {
      "type": "text",
      "data": "cellForRowAt indexPath also needs to be adjusted:"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n  let cell = tableView.dequeueReusableCell(withIdentifier: \"DomainCell\", for: indexPath)\n  let domainObject: DomainObject\n  if isFiltering() {\n    domainObject = filteredDomainObject[indexPath.row]\n  } else {\n    domainObject = domainObjects[indexPath.row]\n  }\n  cell.textLabel!.text = domainObject.shortName\n  cell.detailTextLabel!.text = domainObject.details\n  return cell\n}"
    },
    {
      "type": "text",
      "data": "When it goes towards showing item details, think of passing the filtered result array!"
    },
    {
      "type": "code",
      "language": "swift",
      "data": " override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n    if segue.identifier == \"showDomainDetail\" {\n      if let indexPath = tableView.indexPathForSelectedRow {\n       let domainObject: DomainObject\n        if isFiltering() {\n          domainObject = filteredDomainObject[indexPath.row]\n        } else {\n          domainObject = domainObjects[indexPath.row]\n        }\n        let controller = (segue.destination as! UINavigationController).topViewController as! DetailViewController\n        controller.detailCandy = domainObject\n        controller.navigationItem.leftBarButtonItem = splitViewController?.displayModeButtonItem\n        controller.navigationItem.leftItemsSupplementBackButton = true\n      }\n    }\n  }"
    },
    {
      "type": "text",
      "data": "For implementing a scope bar (filtering), the delegate protocol needs to be implemented:"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "extension MasterViewController: UISearchBarDelegate {\n  // MARK: - UISearchBar Delegate\n  func searchBar(_ searchBar: UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Int) {\n    filterContentForSearchText(searchBar.text!, scope: searchBar.scopeButtonTitles![selectedScope])\n  }\n}"
    },
    {
      "type": "text",
      "data": "For displaying the result amount (especially useful when nothing was found), you can add a separate view:"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "import UIKit\n\nclass SearchResultsView: UIView {\n  \n  let searchResultsLabel: UILabel = UILabel()\n  \n  override public init(frame: CGRect) {\n    super.init(frame: frame)\n    configureView()\n  }\n  \n  required public init?(coder: NSCoder) {\n    super.init(coder: coder)\n    configureView()\n  }\n  \n  func configureView() {\n    self.backgroundColor = UIColor.white\n    self.alpha = 0.0\n    \n    // Configure label\n    searchResultsLabel.textAlignment = .center\n    searchResultsLabel.textColor = UIColor.black\n    addSubview(searchResultsLabel)\n  }\n  \n  override func draw(_ rect: CGRect) {\n    searchResultsLabel.frame = self.bounds\n  }\n  \n  //MARK: - Animation\n  \n  fileprivate func hideFooter() {\n    UIView.animate(withDuration: 0.7) {[unowned self] in\n      self.alpha = 0.0\n    }\n  }\n  \n  fileprivate func showFooter() {\n    UIView.animate(withDuration: 0.7) {[unowned self] in\n      self.alpha = 1.0\n    }\n  }\n}\n\nextension SearchResultsView {\n  //MARK: - Public API\n  \n  public func setNotFiltering() {\n    searchResultsLabel.text = \"\"\n    hideFooter()\n  }\n  \n  public func setIsFilteringToShow(filteredItemCount: Int, of totalItemCount: Int) {\n    if (filteredItemCount == totalItemCount) {\n      setNotFiltering()\n    } else if (filteredItemCount == 0) {\n      searchResultsLabel.text = \"Nothing found.\"\n      showFooter()\n    } else {\n      searchResultsLabel.text = \"Showing \\(filteredItemCount) of \\(totalItemCount)\"\n      showFooter()\n    }\n  }\n\n}"
    }
  ]
}