{
  "title": "Initialization",
  "cells": [
    {
      "type": "text",
      "data": "<br>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "class OwnViewController: UIViewController, UITextViewDelegate {\n  var initialInformation: String?\n  \n  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n  }\n  \n  required init?(coder aDecoder: NSCoder) {\n    super.init(coder: aDecoder)\n  }\n  \n  convenience init(initialInformation: String) {\n    self.init()\n    self.initialInformation = initialInformation\n  }\n  \n  \n  override func viewDidLoad() {\n    super.viewDidLoad()\n    // Do stuff\n  }\n  \n}"
    },
    {
      "type": "text",
      "data": "<h3>Very goog article from&nbsp;<a href=\"https://patrickdiviacco.github.io/real-life-code/articles/2017-07-05-initializers\">https://patrickdiviacco.github.io/real-life-code/articles/2017-07-05-initializers</a>:</h3>"
    },
    {
      "type": "text",
      "data": "<h1 id=\"how-does-initialization-work\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1rem; font-weight: normal; color: rgb(21, 153, 87); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">How does initialization work?</h1><h1 class=\"title\" style=\"line-height: 1.2141em; -webkit-hyphens: manual; margin-top: 0px; margin-bottom: 0.5em; max-width: 100%; color: rgb(27, 27, 27);\"><p style=\"box-sizing: border-box; margin-bottom: 1em; color: rgb(96, 108, 113);\"><span style=\"font-weight: normal;\"><font face=\"AvenirNext-Regular\" size=\"4\">Have you ever stumbled upon errors like these ?</font></span></p><blockquote style=\"box-sizing: border-box; padding-right: 1rem; padding-left: 1rem; color: rgb(129, 145, 152); border-left-width: 0.3rem; border-left-color: rgb(220, 230, 240);\"><p style=\"box-sizing: border-box; margin-bottom: 0px; margin-top: 0px;\"><span style=\"font-weight: normal;\"><font face=\"AvenirNext-Regular\" size=\"4\">Error: ‘required’ initializer X must be provided by subclass of Y</font></span></p></blockquote><blockquote style=\"box-sizing: border-box; padding-right: 1rem; padding-left: 1rem; color: rgb(129, 145, 152); border-left-width: 0.3rem; border-left-color: rgb(220, 230, 240);\"><p style=\"box-sizing: border-box; margin-bottom: 0px; margin-top: 0px;\"><span style=\"font-weight: normal;\"><font face=\"AvenirNext-Regular\" size=\"4\">Error: super.init isn’t called on all paths before returning from initializer</font></span></p></blockquote><blockquote style=\"box-sizing: border-box; padding-right: 1rem; padding-left: 1rem; color: rgb(129, 145, 152); border-left-width: 0.3rem; border-left-color: rgb(220, 230, 240);\"><p style=\"box-sizing: border-box; margin-bottom: 0px; margin-top: 0px;\"><span style=\"font-weight: normal;\"><font face=\"AvenirNext-Regular\" size=\"4\">Error: property X not initialized at super.init call</font></span></p></blockquote><blockquote style=\"box-sizing: border-box; padding-right: 1rem; padding-left: 1rem; color: rgb(129, 145, 152); border-left-width: 0.3rem; border-left-color: rgb(220, 230, 240);\"><p style=\"box-sizing: border-box; margin-bottom: 0px; margin-top: 0px;\"><span style=\"font-weight: normal;\"><font face=\"AvenirNext-Regular\" size=\"4\">Error: variable X used before being initialized</font></span></p></blockquote><blockquote style=\"box-sizing: border-box; padding-right: 1rem; padding-left: 1rem; color: rgb(129, 145, 152); border-left-width: 0.3rem; border-left-color: rgb(220, 230, 240);\"><p style=\"box-sizing: border-box; margin-bottom: 0px; margin-top: 0px;\"><span style=\"font-weight: normal;\"><font face=\"AvenirNext-Regular\" size=\"4\">Error: use of ‘self’ in method call X before all stored properties are initialized</font></span></p></blockquote><blockquote style=\"box-sizing: border-box; padding-right: 1rem; padding-left: 1rem; color: rgb(129, 145, 152); border-left-width: 0.3rem; border-left-color: rgb(220, 230, 240);\"><p style=\"box-sizing: border-box; margin-bottom: 0px; margin-top: 0px;\"><span style=\"font-weight: normal;\"><font face=\"AvenirNext-Regular\" size=\"4\">Error: Instance member X cannot be used on type Y</font></span></p></blockquote><blockquote style=\"box-sizing: border-box; padding-right: 1rem; padding-left: 1rem; color: rgb(129, 145, 152); border-left-width: 0.3rem; border-left-color: rgb(220, 230, 240);\"><p style=\"box-sizing: border-box; margin-bottom: 0px; margin-top: 0px;\"><span style=\"font-weight: normal;\"><font face=\"AvenirNext-Regular\" size=\"4\">Error: designated initializer for X cannot delegate (with ‘self.init’); did you mean this to be a convenience initializer?</font></span></p></blockquote><blockquote style=\"box-sizing: border-box; padding-right: 1rem; padding-left: 1rem; color: rgb(129, 145, 152); border-left-width: 0.3rem; border-left-color: rgb(220, 230, 240);\"><p style=\"box-sizing: border-box; margin-bottom: 0px; margin-top: 0px;\"><span style=\"font-weight: normal;\"><font face=\"AvenirNext-Regular\" size=\"4\">Error: use of ‘self’ in method call ‘xxx’ before super.init initialize self</font></span></p></blockquote><p style=\"box-sizing: border-box; margin-bottom: 1em; color: rgb(96, 108, 113);\"><span style=\"font-weight: normal;\"><font face=\"AvenirNext-Regular\" size=\"4\">Is that the case?</font></span></p></h1><section style=\"max-width: 100%; color: rgb(27, 27, 27); font-size: 18px;\"><blockquote style=\"color: rgba(0, 0, 0, 0.65098); margin-left: 2px; margin-right: 6px; padding-left: 16px; border-left-width: 3px; border-left-color: rgba(0, 0, 0, 0.0980392); max-width: 100%;\"><section style=\"max-width: 100%; color: rgb(27, 27, 27); font-size: 18px;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">If you are not just looking for workarounds to calm down the compiler but rather an in-depth explanation of the problem, you are in the right place.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You have probably tried some of the following fixes:</font></p><ul style=\"max-width: 100%;\"><li style=\"max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">making an instance variable an optional, just because you could not assign its value in the initializer straight away .</font></p></li><li style=\"max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">adding undesired initializers to your subclass just because they were required by the compiler</font></p></li><li style=\"max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">duplicating boilerplate code in between your initializers because you could not call the same function closures from within.</font></p></li><li style=\"max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">and more.</font></p></li></ul><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">For these and other reasons, you might have felt your design choices annoyingly restricted by the compiler.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">So, let’s go to the root of these issues once and for all.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">ction will provide a quick overview on how classes are initialized in Swift and what are the types of initializers.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">cond section will address the above mentioned errors, and for each of them will provide the best solution together with code snippets.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">If you already feel confident about the Swift initialization theory, then you can directly jump to the second part.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Let’s dive into the initialization key concepts.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><br></font></p><h1 style=\"font-size: 1.25em; line-height: 1.4em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">What is initialization?</font></h1><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Initialization is the assignment of initial values for variables, classes, structures and enumerations.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">This process involves setting an initial value for each stored property and performing any other setup the new instance is ready to use.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You implement this initialization process by defining&nbsp;<strong style=\"max-width: 100%;\">initializers</strong>, which are like&nbsp;<strong style=\"max-width: 100%;\">special methods that can be called to create a new instance</strong>&nbsp;of a particular type.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Their primary role is to&nbsp;<strong style=\"max-width: 100%;\">ensure that new instances of a type are correctly initialized before they are used</strong>&nbsp;for the first time.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">The errors listed above are due to bad implementation of the initialization process of instances.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Prior to Swift, if you were used to Objective-C, you probably didn’t have too many migraines when initializing new instances.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Swift made the initialization process more robust and less error-prone than before. That’s why we need to follow more rules and more precisely when initializing objects.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Before to see all different types of initializers, let’s introduce the concept of initialization delegation.</font></p><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\"><br></font></h2><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Initialization delegation</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Initializers can call other initializers to perform part of an instance’s initialization. This process, known as&nbsp;<strong style=\"max-width: 100%;\">initializer delegation</strong>, avoids duplicating code across multiple initializers.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">The rules for how initializer delegation works, and for what forms of delegation are allowed, are different for value types and class types.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><strong style=\"max-width: 100%;\"><br></strong></font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><strong style=\"max-width: 100%;\">Value types (structures and enumerations)</strong>&nbsp;do not support inheritance, and so their initializer delegation process is relatively simple, because they can only delegate to another initializer in the same class.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><strong style=\"max-width: 100%;\"><br></strong></font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><strong style=\"max-width: 100%;\">Classes</strong>, however, can inherit from other classes. This means that classes can delegate to superclass initializers and therefore have additional responsibilities for ensuring that all stored properties they inherit are assigned a suitable value during initialization.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">All of a class’s stored properties—including any properties the class inherits from its superclass—must be assigned an initial value during initialization.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Swift defines two kinds of initializers for class types to help ensure all stored properties receive an initial value. These are known as designated initializers and&nbsp;</font><span style=\"font-family: AvenirNext-Regular;\">convenience initializers.</span></p><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\"><br></font></h2><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Designated</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Designated initializers are the primary initializers that&nbsp;<strong style=\"max-width: 100%;\">fully initializes all instance variables</strong>&nbsp;of the class.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">An instance can be initialized only if all its variables have been initialized. That’s what designated initializers guarantee.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">For this reason the&nbsp;<strong style=\"max-width: 100%;\">initialization flow must necessarily pass through designated initializers</strong>. This means that only designated initializers can call initializers from the superclass.</font></p><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\"><br></font></h2><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Convenience</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Convenience initializers are secondary, supporting initializers, to create an instance of the class for a specific use case or input value type. For example, they can set customized default values to the instance variables.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">A convenience initializer&nbsp;<strong style=\"max-width: 100%;\">must ultimately call a designated initializer</strong>.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You do not have to provide convenience initializers if your class does not require them.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Convenience initializers can be&nbsp;<strong style=\"max-width: 100%;\">a useful shortcut</strong>&nbsp;to initialize a class according to a common initialization pattern.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\">​<code>​</code><span style=\"font-family: AvenirNext-Regular; max-width: 100%; font-weight: bold;\">class</span><span style=\"font-family: AvenirNext-Regular;\"> </span><span style=\"font-family: AvenirNext-Regular; max-width: 100%; font-weight: bold;\">Student</span><span style=\"font-family: AvenirNext-Regular;\"> </span><span style=\"font-family: AvenirNext-Regular; max-width: 100%;\">{}</span><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"font-size: 16.200000762939453px; max-width: 100%;\"><font face=\"AvenirNext-Regular\">    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">?</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">surname</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span>\n\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">?,</span> <span style=\"max-width: 100%;\">surname</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">name</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">name</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">surname</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">surname</span>\n    <span style=\"max-width: 100%;\">}</span>\n\n    <span style=\"max-width: 100%;\">convenience</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">surname</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">nil</span><span style=\"max-width: 100%;\">,</span> <span style=\"max-width: 100%;\">surname</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%;\">surname</span><span style=\"max-width: 100%;\">)</span>\n    <span style=\"max-width: 100%;\">}</span></font></code></pre></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">In the example above, the convenience initializer is used as shortcut when we don’t know the name of a student.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Convenience initializers&nbsp;<strong style=\"max-width: 100%;\">cannot call initializers from a superclass</strong>. They must call designated initializers that will delegate to the superclass.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><strong style=\"max-width: 100%;\">Classes tend to have very few designated initializers, and it is quite common for a class to have only one</strong>. Designated initializers are “funnel” points through which initialization takes place, and through which the initialization process continues up the superclass chain.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><strong style=\"max-width: 100%;\">Every class must have at least one designated initializer.</strong>&nbsp;In some cases, this requirement is satisfied by inheriting one or more designated initializers from a superclass</font></p><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Default and Memberwise Initializers</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Swift provides a default initializer for any structure or class&nbsp;<strong style=\"max-width: 100%;\">that provides default values for all of its properties</strong>&nbsp;and&nbsp;<strong style=\"max-width: 100%;\">does not provide at least one initializer</strong>itself.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">The default initializer simply creates a new instance with all of its properties set to their default values.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">ShoppingListItem</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">?</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">quantity</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">1</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">purchased</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">false</span>\n<span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">item</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">ShoppingListItem</span><span style=\"max-width: 100%;\">()</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Structures and enums provide also&nbsp;<strong style=\"max-width: 100%;\">memberwise initializers</strong>, that takes as arguments all their instance variables. See example below:</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">struct</span> <span style=\"max-width: 100%; font-weight: bold;\">MyStruct</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">surname</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">myStruct</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">MyStruct</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%;\">\"Name\"</span><span style=\"max-width: 100%;\">,</span> <span style=\"max-width: 100%;\">surname</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%;\">\"Surname\"</span><span style=\"max-width: 100%;\">)</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You don’t need to implement memberwise initializers by yourself as long as you don’t want add other custom initializers.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">If you still want to your custom initializers together with default and/or memberwise initializers you have two options:</font></p><ul style=\"max-width: 100%;\"><li style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">If it’s a class you can&nbsp;<strong style=\"max-width: 100%;\">make your custom initializer a convenience initializer</strong>.</font></li></ul><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">ShoppingListItem</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">?</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">quantity</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">1</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">purchased</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">false</span>\n\n    <span style=\"max-width: 100%;\">convenience</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">name</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">name</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">item</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">ShoppingListItem</span><span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%; font-style: italic;\">//still provided</span>\n</font></code></pre></div></div><ul style=\"max-width: 100%;\"><li style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">If it’s a struct or enum you can&nbsp;<strong style=\"max-width: 100%;\">put your custom initializer in an extension</strong>.</font></li></ul><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">struct</span> <span style=\"max-width: 100%; font-weight: bold;\">ShoppingListItem</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">?</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">quantity</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">1</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">purchased</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">false</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">extension</span> <span style=\"max-width: 100%; font-weight: bold;\">ShoppingListItem</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">name</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">name</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">item</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">ShoppingListItem</span><span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%; font-style: italic;\">//still provided</span>\n</font></code></pre></div></div><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Initializer inheritance</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Unlike subclasses in Objective-C, Swift subclasses&nbsp;<strong style=\"max-width: 100%;\">do not always inherit their superclass initializers by default</strong>.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Swift’s approach prevents a situation in which a simple initializer from a superclass is inherited by a more specialized subclass and is used to create a new instance of the subclass that is not fully or correctly initialized.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Superclass initializers are inherited only when it is safe and appropriate to do so. For this reason,&nbsp;<strong style=\"max-width: 100%;\">you need to provide default values for all subclass properties</strong>to enable the inheritance of the superclass initializers.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Alternatively, you can&nbsp;<strong style=\"max-width: 100%;\">provide a custom implementation of those initializers</strong>you want to make available in the subclass too.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">In the snippet below, the property&nbsp;<em style=\"max-width: 100%;\">newVariable</em>&nbsp;in class B doesn’t have a default value. It’s therefore not safe to inherit the initializer from class A because such property could never be initialized.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">string</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">print</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">string</span><span style=\"max-width: 100%;\">)</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">B</span> <span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">newVariable</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span>\n\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">newVariable</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">\"hello\"</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">let</span> <span style=\"max-width: 100%;\">a</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">string</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%;\">\"ok\"</span><span style=\"max-width: 100%;\">)</span>\n<span style=\"max-width: 100%; font-weight: bold;\">let</span> <span style=\"max-width: 100%;\">b</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">B</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">string</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%;\">\"ok\"</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%; font-style: italic;\">//error</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Assuming that you provide default values for any new properties you introduce in a subclass, the following two rules apply:</font></p><blockquote style=\"color: rgba(0, 0, 0, 0.65098); margin-left: 2px; margin-right: 6px; padding-left: 16px; border-left-width: 3px; border-left-color: rgba(0, 0, 0, 0.0980392); max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Rule 1 If your subclass doesn’t define any designated initializers, it automatically inherits all of its superclass designated initializers.</font></p></blockquote><blockquote style=\"color: rgba(0, 0, 0, 0.65098); margin-left: 2px; margin-right: 6px; padding-left: 16px; border-left-width: 3px; border-left-color: rgba(0, 0, 0, 0.0980392); max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Rule 2 If your subclass provides an implementation of all of its superclass designated initializers—either by inheriting them as per rule 1, or by providing a custom implementation as part of its definition—then it automatically inherits all of the superclass convenience initializers.</font></p></blockquote><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">As last remark, notice that if you write a subclass initializer&nbsp;<strong style=\"max-width: 100%;\">that matches a superclass convenience initializer</strong>, that superclass convenience initializer&nbsp;<strong style=\"max-width: 100%;\">can never be called directly by your subclass</strong>, as per the rules described before.</font></p><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Override</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">When you subclass a class, and you want to customize the superclass initializer, than you add the modifier&nbsp;<strong style=\"max-width: 100%;\">override</strong>&nbsp;in front of the initializer.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You override an initializer to set additional variables in the subclass. In the example below, we use it so set the variable&nbsp;<em style=\"max-width: 100%;\">firstLetter</em>:</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">name</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">name</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">B</span> <span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">firstLetter</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">Character</span><span style=\"max-width: 100%;\">?</span>\n\n    <span style=\"max-width: 100%; font-weight: bold;\">override</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">firstLetter</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">characters</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">first</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">super</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">)</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You also&nbsp;<strong style=\"max-width: 100%;\">call the initializer of the superclass</strong>&nbsp;to make sure that all variables in the superclass are initialized too.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">We are going to examine more in depth the&nbsp;<strong style=\"max-width: 100%;\">override modifier</strong>&nbsp;in the next section.</font></p><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Required</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">The&nbsp;<strong style=\"max-width: 100%;\">required</strong>&nbsp;modifier before the definition of a class initializer signals that all of its subclasses can also be initialized using that initializer. This means you also need to add that initializer to any of its subclasses (with the modifier required too).</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">required</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">B</span> <span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">required</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">super</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You must&nbsp;<strong style=\"max-width: 100%;\">also write the required modifier before every subclass implementation</strong>&nbsp;of a required initializer. You&nbsp;<strong style=\"max-width: 100%;\">do not write the override modifier</strong>&nbsp;when overriding a required designated initializer.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Required initializers are not only used when subclassing a class with a required initializer, but also when&nbsp;<strong style=\"max-width: 100%;\">adopting a protocol that has an initializer in its definition</strong>.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 770.59375px; -webkit-margin-start: -48px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">protocol</span> <span style=\"max-width: 100%; font-weight: bold;\">Protocol</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Protocol</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">required</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{}</span> <span style=\"max-width: 100%; font-style: italic;\">// if you don't use required here, you get a compile error</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">If you make the class&nbsp;<em style=\"max-width: 100%;\">final</em>&nbsp;then it can’t be subclassed and it is not necessary too add the modifier required in front of its initializer.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">final</span> <span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">B</span> <span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Protocol</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Two words about designated, convenience and required</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Designated, convenience and required modifiers are used to specify restrictions on subclasses and determine the initialization flow.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">For a deeper analysis about the initialization flow I suggest you the&nbsp;<a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html\" style=\"text-decoration: none; color: rgb(65, 110, 210); max-width: 100%;\">Apple guide about Swift initializers</a></font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Note that:</font></p><ul style=\"max-width: 100%;\"><li style=\"max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><strong style=\"max-width: 100%;\">Required initializers and designated initializers are not related</strong>concepts. Required initializers don’t have to be designated and designated initializers don’t have to be required.</font></p></li><li style=\"max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Classes can have&nbsp;<strong style=\"max-width: 100%;\">multiple required and designated initializers</strong>.</font></p></li><li style=\"max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">The required keyword indicates that&nbsp;<strong style=\"max-width: 100%;\">subclasses must provide that initializer</strong>, and the&nbsp;<strong style=\"max-width: 100%;\">convenience keyword indicates that subclasses cannot call that initialize</strong>.</font></p></li><li style=\"max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><strong style=\"max-width: 100%;\">Structs and enums don’t use the designated, convenience and required modifiers</strong>, because they don’t support subclassing.</font></p></li><li style=\"max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Despite not having the keywords, struct and enums&nbsp;<strong style=\"max-width: 100%;\">must still provide initializers defined in any protocols they conform to</strong>&nbsp;and&nbsp;<strong style=\"max-width: 100%;\">you can write ‘convenient’ initializers which call the main initializer</strong>, just without the convenience keyword.</font></p></li></ul><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">We have given a overview of the initialization process in Swift. For completeness we should mention the failable initializers.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Last but not least, there are the failable initializers.</font></p><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Failable</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><strong style=\"max-width: 100%;\">Initialization can fail</strong>. Failure in initialization can be due to invalid parameter values, absence of a required external resource, or some other condition.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">To handle such cases we can opt for using failable initiializers.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You write a failable initializer by placing a question mark after the init keyword (init?).</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">?(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">?)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">if</span> <span style=\"max-width: 100%;\">name</span> <span style=\"max-width: 100%; font-weight: bold;\">==</span> <span style=\"max-width: 100%; font-weight: bold;\">nil</span> <span style=\"max-width: 100%;\">{</span> <span style=\"max-width: 100%; font-weight: bold;\">return</span> <span style=\"max-width: 100%; font-weight: bold;\">nil</span> <span style=\"max-width: 100%;\">}</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">...</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You can override a superclass failable initializer in a subclass, just like any other initializer.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You can&nbsp;<strong style=\"max-width: 100%;\">override a failable initializer with a nonfailable initializer too, but not the other way around</strong>. This enables you to define a subclass for which initialization cannot fail, even though initialization of the superclass is allowed to fail.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">If you override a failable superclass initializer with a non-failable subclass initializer, the only way to delegate up to the superclass initializer is to&nbsp;<strong style=\"max-width: 100%;\">force-unwrap the result of the failable superclass initializer</strong>&nbsp;by adding an esclamation point when you call the failable superclass initializer.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">?()</span> <span style=\"max-width: 100%;\">{</span> <span style=\"max-width: 100%; font-weight: bold;\">...</span>  <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">B</span> <span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">override</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">super</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span><span style=\"max-width: 100%; font-weight: bold;\">!</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">...</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><strong style=\"max-width: 100%;\">A failable initializer can also delegate to a nonfailable initializer in the same class</strong>. Use this approach if you need to&nbsp;<strong style=\"max-width: 100%;\">add a potential failure state to an existing initialization process</strong>&nbsp;that does not otherwise fail.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">This is an interesting use. It means that you can&nbsp;<strong style=\"max-width: 100%;\">extend the interface of a class with a failable initializer</strong>&nbsp;like illustrated in this snippet:</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span>\n\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">name</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">name</span>\n    <span style=\"max-width: 100%;\">}</span>\n\n    <span style=\"max-width: 100%;\">convenience</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">?(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">?)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">if</span> <span style=\"max-width: 100%;\">name</span> <span style=\"max-width: 100%; font-weight: bold;\">==</span> <span style=\"max-width: 100%; font-weight: bold;\">nil</span> <span style=\"max-width: 100%;\">{</span> <span style=\"max-width: 100%; font-weight: bold;\">return</span> <span style=\"max-width: 100%; font-weight: bold;\">nil</span> <span style=\"max-width: 100%;\">}</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">)</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">The failable initializer&nbsp;<strong style=\"max-width: 100%;\">init?(name:String?)</strong>&nbsp;is used so that you can pass an optional String to initialize the class.</font></p><h3 style=\"font-size: 1.05em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Implicitly unwrapped failable</font></h3><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">As final note, a failable initializer can be implicitly unwrapped by replacing the question mark with an exclamation point</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">While a failable initializer&nbsp;<strong style=\"max-width: 100%;\">init?</strong>&nbsp;will return an optional, an unwrapped failable&nbsp;<strong style=\"max-width: 100%;\">init!</strong>will return either a value or nil.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">An implicitly unwrapped optional can be convenient in case:</font></p><ul style=\"max-width: 100%;\"><li style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">you are absolutely sure that the value won’t be nil, so that you don’t have to deal with an optional as return value,</font></li><li style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">you just want to test if the object has been initialized by checking if the value is nil or not.</font></li></ul><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">That’s all about initialization theory in Swift. Armed with it, let’s now discuss the typical compiler errors you might encounter while programming your initializers. And for each error, let’s explain the cause and provide the right solution.</font></p><h1 style=\"font-size: 1.25em; line-height: 1.4em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Errors</font></h1><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Error: ‘required’ initializer X must be provided by subclass of Y</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">This error is thrown when&nbsp;<strong style=\"max-width: 100%;\">a required initializer of a class is not implemented in one of its subclasses</strong>.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">A common example is when subclassing&nbsp;<em style=\"max-width: 100%;\">UIViewController</em>, and not providing the implementation of&nbsp;<code style=\"max-width: 100%;\">init(coder aDecoder: NSCoder)</code>, resulting in the error:</font></p><blockquote style=\"color: rgba(0, 0, 0, 0.65098); margin-left: 2px; margin-right: 6px; padding-left: 16px; border-left-width: 3px; border-left-color: rgba(0, 0, 0, 0.0980392); max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Error: ‘required’ initializer ‘init(coder:)’ must be provided by subclass of ‘UIViewController’</font></p></blockquote><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Please note that you don’t get this error if you don’t add custom designated initializers in the subclass of&nbsp;<em style=\"max-width: 100%;\">UIViewController</em>&nbsp;. In this case designated superclass initializers are inherited.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You can silent this error&nbsp;<strong style=\"max-width: 100%;\">by making your custom initializer a convenience initializer</strong>.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">ViewController</span> <span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">UIViewController</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%;\">convenience</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">custom</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Error: super.init isn’t called on all paths before returning from initializer</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">This error is thrown when you&nbsp;<strong style=\"max-width: 100%;\">override a custom initializer in the subclass and do not delegate to the superclass</strong>.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">The solution is to call the superclass initializer you are overriding, by adding the line&nbsp;<em style=\"max-width: 100%;\">super.init(…)</em>.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 730px; -webkit-margin-start: -27.703125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>  <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">B</span> <span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">property</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span>    \n    <span style=\"max-width: 100%; font-weight: bold;\">override</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">property</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">name</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">super</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%; font-style: italic;\">//this line is necessary or you get the error</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">b</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">B</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%;\">\"hello\"</span><span style=\"max-width: 100%;\">)</span>\n</font></code></pre></div></div><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Error: property X not initialized at super.init call</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You get this error when you delegate the initialization to the superclass&nbsp;<strong style=\"max-width: 100%;\">without initializing all properties in the subclass first</strong>.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">x</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">x</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">x</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">x</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n\n<span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">B</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">y</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">x</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span><span style=\"max-width: 100%;\">,</span> <span style=\"max-width: 100%;\">y</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">y</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">y</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">super</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">x</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%;\">x</span><span style=\"max-width: 100%;\">)</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">That’s because classes and structures must set all of their stored properties to an appropriate initial value by the time an instance of that class or structure is created.&nbsp;<strong style=\"max-width: 100%;\">Stored properties cannot be left in an indeterminate state</strong>.</font></p><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Error: variable X used before being initialized</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Look at this snippet:</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 730px; -webkit-margin-start: -27.703125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n   <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">button</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">UIButton</span>\n   <span style=\"max-width: 100%; font-weight: bold;\">init</span> <span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{</span>\n      <span style=\"max-width: 100%; font-weight: bold;\">let</span> <span style=\"max-width: 100%;\">b</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">UIButton</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span>\n      <span style=\"max-width: 100%;\">b</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">addTarget</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%;\">,</span> <span style=\"max-width: 100%;\">action</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">#selector(</span><span style=\"max-width: 100%; font-weight: bold;\">self.action</span><span style=\"max-width: 100%; font-weight: bold;\">)</span><span style=\"max-width: 100%;\">,</span> <span style=\"max-width: 100%;\">for</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">touchUpInside</span><span style=\"max-width: 100%;\">)</span>\n      <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">button</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">b</span>\n    <span style=\"max-width: 100%;\">}</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">...</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Compiler throws the error&nbsp;<em style=\"max-width: 100%;\">variable button used before being initialized</em>.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">That’s error is thrown at the line where we call&nbsp;<em style=\"max-width: 100%;\">UIButton addTarget</em>&nbsp;method and we pass&nbsp;<strong style=\"max-width: 100%;\">self</strong>&nbsp;as first parameter. But&nbsp;<strong style=\"max-width: 100%;\">self has not been initialized yet</strong>.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">That’s because we are still in the first phase of the initialization:&nbsp;<strong style=\"max-width: 100%;\">not all properties of the instance has been initialized</strong>. Indeed the property&nbsp;<em style=\"max-width: 100%;\">button</em>&nbsp;has not initialized yet.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">How to solve it? We could&nbsp;<strong style=\"max-width: 100%;\">first assign the newly created button to the property and then configure it</strong>:</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 770.59375px; -webkit-margin-start: -48px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">button</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">UIButton</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span> <span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">button</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">UIButton</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">button</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">addTarget</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%;\">,</span> <span style=\"max-width: 100%;\">action</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">#selector(</span><span style=\"max-width: 100%; font-weight: bold;\">self.action</span><span style=\"max-width: 100%; font-weight: bold;\">)</span><span style=\"max-width: 100%;\">,</span> <span style=\"max-width: 100%;\">for</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">touchUpInside</span><span style=\"max-width: 100%;\">)</span>\n    <span style=\"max-width: 100%;\">}</span>\n\n    <span style=\"max-width: 100%; font-weight: bold;\">...</span>\n</font></code></pre></div></div><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Error: use of ‘self’ in method call X before all stored properties are initialized</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You get this error if you are still in the first phase of the initialization, when not all properties are initialized, and you call a method of the not yet initialized instance.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">a</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">b</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span>\n\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span> <span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">a</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">3</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">b</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">method</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">int</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">a</span><span style=\"max-width: 100%;\">)</span>\n    <span style=\"max-width: 100%;\">}</span>\n\n    <span style=\"max-width: 100%; font-weight: bold;\">func</span> <span style=\"max-width: 100%; font-weight: bold;\">method</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">int</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">Int</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%; font-weight: bold;\">-&gt;</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">return</span> <span style=\"max-width: 100%;\">int</span> <span style=\"max-width: 100%; font-weight: bold;\">+</span> <span style=\"max-width: 100%;\">2</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">From Apple’s Swift book:</font></p><blockquote style=\"color: rgba(0, 0, 0, 0.65098); margin-left: 2px; margin-right: 6px; padding-left: 16px; border-left-width: 3px; border-left-color: rgba(0, 0, 0, 0.0980392); max-width: 100%;\"><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Class initialization in Swift is a two-phase process. In the first phase, each stored property is assigned an initial value by the class that introduced it. Once the initial state for every stored property has been determined, the second phase begins, and each class is given the opportunity to customize its stored properties further before the new instance is considered ready for use. Class need some kind of default value before first phase ends. Customising values is part of second phase.</font></p></blockquote><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">This means that you first need to initialize all properties in your class. Only then you can further configure, eventually calling methods, or using properties values.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">In the snippet above we need to avoid to call the instance method during initialization. There are many options here. You could just use some inline code to set the property value:</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Or you could add the&nbsp;<em style=\"max-width: 100%;\">class</em>&nbsp;modifier to the method signature&nbsp;<strong style=\"max-width: 100%;\">to make it a class method</strong>&nbsp;and use it as such.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">a</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">b</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span>\n\n    <span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">func</span> <span style=\"max-width: 100%; font-weight: bold;\">method</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">int</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">Int</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%; font-weight: bold;\">-&gt;</span> <span style=\"max-width: 100%; font-weight: bold;\">Int</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">return</span> <span style=\"max-width: 100%;\">int</span> <span style=\"max-width: 100%; font-weight: bold;\">+</span> <span style=\"max-width: 100%;\">2</span>\n    <span style=\"max-width: 100%;\">}</span>\n\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span> <span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">a</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">3</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">b</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">method</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">int</span><span style=\"max-width: 100%;\">:</span> <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">a</span><span style=\"max-width: 100%;\">)</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Please note that this is just one of the many solutions you could adopt depending on the context and your purposes.</font></p><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Error: Instance member X cannot be used on type Y</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You get this error when you are using instance properties but you are still in the first phase of the initialization phase.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">In the snippet below we use the property array to initialize the property count.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">array</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">[</span><span style=\"max-width: 100%;\">3</span><span style=\"max-width: 100%;\">,</span><span style=\"max-width: 100%;\">4</span><span style=\"max-width: 100%;\">]</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">count</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">{</span> <span style=\"max-width: 100%; font-weight: bold;\">return</span> <span style=\"max-width: 100%;\">array</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">count</span> <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">However this is not feasible because&nbsp;<strong style=\"max-width: 100%;\">the instance has been fully initialized yet, and its properties are not available</strong>.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">A solution in this case could be to make the property&nbsp;<em style=\"max-width: 100%;\">count</em>&nbsp;a&nbsp;<strong style=\"max-width: 100%;\">computed property</strong>, by just removing the&nbsp;<em style=\"max-width: 100%;\">=</em>.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">array</span> <span style=\"max-width: 100%; font-weight: bold;\">=</span> <span style=\"max-width: 100%;\">[</span><span style=\"max-width: 100%;\">3</span><span style=\"max-width: 100%;\">,</span><span style=\"max-width: 100%;\">4</span><span style=\"max-width: 100%;\">]</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">var</span> <span style=\"max-width: 100%;\">count</span> <span style=\"max-width: 100%;\">{</span> <span style=\"max-width: 100%; font-weight: bold;\">return</span> <span style=\"max-width: 100%;\">array</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%;\">count</span> <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Now the code compiles, because count is computed “on the fly” only when the property is used in the code (that’s the purpose of computed properties). This means that the method&nbsp;<em style=\"max-width: 100%;\">array.count</em>&nbsp;is called&nbsp;<strong style=\"max-width: 100%;\">after the initialization of the instance</strong>.</font></p><h2 style=\"font-size: 1.125em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Error: designated initializer for X cannot delegate (with ‘self.init’); did you mean this to be a convenience initializer?</font></h2><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You get this error&nbsp;<strong style=\"max-width: 100%;\">if you are calling another initializer from a designated initializer within the class</strong>.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Designated initializers are not supposed to delegate within the class, but to the superclass only.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{</span> <span style=\"max-width: 100%;\">}</span>\n\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">You can easily fix this issue by&nbsp;<strong style=\"max-width: 100%;\">converting the designated initializer to convenience initializer</strong>.</font></p><div style=\"max-width: 100%;\"><div class=\"scrollable extendsBeyondTextColumn\" style=\"max-width: none; overflow-x: scroll; word-wrap: normal; width: 675px; -webkit-margin-start: -0.203125px;\"><pre style=\"font-size: 0.9em; line-height: 1.45em; max-width: 100%;\"><code style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><span style=\"max-width: 100%; font-weight: bold;\">class</span> <span style=\"max-width: 100%; font-weight: bold;\">A</span> <span style=\"max-width: 100%;\">{</span>\n    <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span> <span style=\"max-width: 100%;\">{</span> <span style=\"max-width: 100%;\">}</span>\n\n    <span style=\"max-width: 100%;\">convenience</span> <span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">(</span><span style=\"max-width: 100%;\">name</span><span style=\"max-width: 100%;\">:</span><span style=\"max-width: 100%; font-weight: bold;\">String</span><span style=\"max-width: 100%;\">)</span> <span style=\"max-width: 100%;\">{</span>\n        <span style=\"max-width: 100%; font-weight: bold;\">self</span><span style=\"max-width: 100%; font-weight: bold;\">.</span><span style=\"max-width: 100%; font-weight: bold;\">init</span><span style=\"max-width: 100%;\">()</span>\n    <span style=\"max-width: 100%;\">}</span>\n<span style=\"max-width: 100%;\">}</span>\n</font></code></pre></div></div><h1 style=\"font-size: 1.25em; line-height: 1.4em; max-width: 100%;\"><font face=\"AvenirNext-Regular\">Summary</font></h1><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">That’s it. In the previous chapter I have summarized all possible errors you can get while implementing your initializers.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">This could be a quick reference to fix your compiler errors and continue coding without giving too much thought.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">However, you won’t go too far if you won’t interiorize the theory behind. For this reason I recommend you to read carefully the first chapter of this article too.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Swift initialization design follows very strict rules. That helps to prevent run time errors caused by initialization inconsistencies, ambiguous code or properties left in an indeterminate state.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Such strictness might seem to add an additional layer of complexity and slowing you down in writing code. But that’s not the truth.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Coding is hard and slow only if the rules are not respected and you end up fighting against the compiler errors often.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">On the other end, once you have interiorized the rules and assimilated the theory, you have precise and convenient paths to follow for any situation and requirement.</font></p><p style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">That’s the reason why designing initializers will become easier and safer than ever.</font></p><div style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><br style=\"max-width: 100%;\"></font><div style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\"><b style=\"max-width: 100%;\">One more thing</b>: do any of these comments sound familiar?&nbsp;<br style=\"max-width: 100%;\"><br style=\"max-width: 100%;\"></font><ul style=\"max-width: 100%;\"><li style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Usually I found that&nbsp;<b style=\"max-width: 100%;\">nobody explained why the code they were giving worked</b>, and therefore if it didn't work for you there was no way to fix it.&nbsp;<b style=\"max-width: 100%;\">I basically just kept copy and pasting code</b>&nbsp;into my project until one worked, and I have no idea what any of it does (all I can do is call it).</font></li><li style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">The most problems I had in tutorials is that&nbsp;<b style=\"max-width: 100%;\">they lack of projects to practice</b>. Like they give you the basics but&nbsp;<b style=\"max-width: 100%;\">no example or idea to learn it to get started</b>.</font></li><li style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">When bugs occur they can be very difficult to fix.</font></li><li style=\"max-width: 100%;\"><font face=\"AvenirNext-Regular\">Practical examples is definitely something I would like to see more often.</font></li></ul><font face=\"AvenirNext-Regular\">If so, you might be interested in&nbsp;<a href=\"https://patrickdiviacco.github.io/real-life-code/README\" style=\"text-decoration: none; color: rgb(65, 110, 210); max-width: 100%;\">this article I wrote</a>.&nbsp;<br style=\"max-width: 100%;\"><br style=\"max-width: 100%;\">And you would probably like to receive my&nbsp;<b style=\"max-width: 100%;\">free material</b>&nbsp;and keep yourself updated with my work. If you wish so, subscribe to my mailing list below and receive the&nbsp;<b style=\"max-width: 100%;\">free guide \"How to structure your first professional iOS app?\"</b>&nbsp;<br style=\"max-width: 100%;\"><br style=\"max-width: 100%;\">I'm Patrick DIviacco, Senior iOS developer. I’m investigating difficulties and main issues arising while learning iOS development. My goal is to write detailed and practical guides on iOS development, with a special care for design and well-written, flexible, maintanable code.</font></div></div></section></blockquote></section>"
    }
  ]
}