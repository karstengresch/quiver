{
  "title": "Strings",
  "cells": [
    {
      "type": "text",
      "data": "<h3>Hash algorithms</h3>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "extension String {\n  var djb2hash: Int {\n    let unicodeScalars = self.unicodeScalars.map { $0.value }\n    return unicodeScalars.reduce(5381) {\n      ($0 << 5) &+ $0 &+ Int($1)\n    }\n  }\n\n  var sdbmhash: Int {\n    let unicodeScalars = self.unicodeScalars.map { $0.value }\n    return unicodeScalars.reduce(0) {\n      Int($1) &+ ($0 << 6) &+ ($0 << 16) - $0\n    }\n  }\n}"
    },
    {
      "type": "text",
      "data": "<div>(from&nbsp;<a href=\"https://useyourloaf.com/blog/swift-hashable/\">https://useyourloaf.com/blog/swift-hashable/</a>)</div>"
    },
    {
      "type": "text",
      "data": "<h3>Filename split</h3>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "let fullFilename = \"thefilename.example\"\nlet index = fullFilename.index(of: \".\") ?? fullFilename.endIndex\nlet prefix = fullFilename[..<index]\nlet suffixIndex = fullFilename.index(index, offsetBy: 1)\nlet suffix = fullFilename[suffixIndex...]\n// If needed, convert the result to a String (long-term \"storage\").\nlet filenameOnly = String(prefix)\nlet suffixOnly = String(suffix)"
    },
    {
      "type": "text",
      "data": "N.B. - there's also String.split. To me, this is much easier to read."
    },
    {
      "type": "text",
      "data": "<h3>Check if String contains specific character</h3>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "let s = \"Hi Folks\"\nif s.rangeOfString(\"Hi\") != nil {\n    print(\"String contains 'Hi'\")\n}"
    },
    {
      "type": "text",
      "data": "<h3>Substring</h3>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "let theString = \"The String\"\nlet subStringRange = theString.range(of:\"The \")\nlet subStringIndex = subStringRange!.upperBound\nlet subString = String(theString[subStringIndex...])"
    },
    {
      "type": "text",
      "data": "<b>Substring after</b>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func subString(_ fullString: String, after: String) -> String? {\n  let theString = fullString\n  let subStringRange = theString.range(of: after)\n  if let subStringIndex = subStringRange?.upperBound {\n    let subString = String(theString[subStringIndex...])\n    return subString\n  } else {\n    return nil\n  }\n}"
    },
    {
      "type": "text",
      "data": "<h3>String range</h3>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func range(_ start:Int, _ count:Int) -> Range<String.Index> {\n    let stringIndex = self.index(start >= 0 ?\n        self.startIndex :\n        self.endIndex, offsetBy: start)\n    let offsetIndex = self.index(stringIndex, offsetBy: count)\n    return stringIndex..<offsetIndex\n}\nfunc nsRange(_ start:Int, _ count:Int) -> NSRange {\n    return NSRange(self.range(start,count), in:self)\n}"
    }
  ]
}