{
  "title": "Dump a Redmine Issue w/ attachments",
  "cells": [
    {
      "type": "code",
      "language": "java",
      "data": "public void dumpIssue(Integer issueId) throws Exception\n  {\n    RedmineManager redmineManager = RedmineManagerFactory.createWithApiKey(LabcaseInformation.LABCASE_BASE_URL, apiKey.orElseThrow(() -> new RuntimeException(\"Missing API key!\")));\n    Issue issue = redmineManager.getIssueManager().getIssueById(issueId, Include.journals, Include.relations, Include.attachments,\n                                                                Include.changesets, Include.watchers);\n    String issueAsJson = JsonWriter.objectToJson(issue, optionalArgs);\n    Map<String, String> attachmentUrlFileNames = issue.getAttachments().stream().collect(Collectors.toMap(attachment -> attachment.getContentURL(), attachment -> attachment.getFileName()));\n\n    persistIssue(issueId, issueAsJson, attachmentUrlFileNames);\n  }\n\n  private void persistIssue(Integer issueId, String issueAsJson, Map<String, String> attachmentUrlFileNames) {\n\n    try {\n\n      String fileName = (new StringBuffer().append(String.valueOf(issueId)).append(\".json\")).toString();\n      String separator = java.nio.file.FileSystems.getDefault().getSeparator();\n\n      Path currentRelativePath = Paths.get(\"\");\n      String currentAbsolutePath = currentRelativePath.toAbsolutePath().toString();\n      String exportDir = StringUtils.join(currentAbsolutePath, separator, \"export\", separator, \"issues\", separator, String.valueOf(issueId));\n\n      FileUtils.forceMkdir(new File(exportDir));\n      Path exportPath = Paths.get(StringUtils.join(exportDir, separator, fileName));\n      Files.write(exportPath, issueAsJson.getBytes());\n\n      for (String key : attachmentUrlFileNames.keySet() ) {\n        File file = new File(exportDir.concat(separator).concat(attachmentUrlFileNames.get(key)));\n        if(!file.exists())\n        {\n          file.createNewFile();\n        }\n        FileOutputStream fileOutputStream = new FileOutputStream(file);\n        CloseableHttpClient httpclient = HttpClients.custom().build();\n        try {\n          String userCredentials = userAuthKey;\n          String basicAuth = \"Basic \" + new String(new org.apache.commons.codec.binary.Base64().encode(userCredentials.getBytes()));\n          HttpGet httpget = new HttpGet(key);\n          httpget.setHeader(\"Authorization\", basicAuth);\n          httpget.setHeader(\"Content-Type\", \"text/html\");\n          CloseableHttpResponse response = httpclient.execute(httpget);\n          try {\n            fileOutputStream.write(EntityUtils.toByteArray(response.getEntity()));\n            fileOutputStream.close();\n          } finally {\n            response.close();\n          }\n        } finally {\n          httpclient.close();\n        }\n      }\n\n    } catch (IOException e) {\n        throw new RuntimeException(\"Could not write the Labcase issue export: \" + e.getLocalizedMessage());\n    }\n  }\n\n}"
    }
  ]
}