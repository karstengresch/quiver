{
  "title": "Strings",
  "cells": [
    {
      "type": "text",
      "data": "Other hash algorithms"
    },
    {
      "type": "code",
      "language": "sh",
      "data": "extension String {\n  var djb2hash: Int {\n    let unicodeScalars = self.unicodeScalars.map { $0.value }\n    return unicodeScalars.reduce(5381) {\n      ($0 << 5) &+ $0 &+ Int($1)\n    }\n  }\n\n  var sdbmhash: Int {\n    let unicodeScalars = self.unicodeScalars.map { $0.value }\n    return unicodeScalars.reduce(0) {\n      Int($1) &+ ($0 << 6) &+ ($0 << 16) - $0\n    }\n  }\n}"
    },
    {
      "type": "text",
      "data": "<div>(from&nbsp;<a href=\"https://useyourloaf.com/blog/swift-hashable/\">https://useyourloaf.com/blog/swift-hashable/</a>)</div>"
    },
    {
      "type": "code",
      "language": "sh",
      "data": "fileprivate func combineHashes(_ hashes: [Int]) -> Int {\nreturn hashes.reduce(0, combineHashValues)\n}\nfileprivate func combineHashValues(_ initial: Int, _ other: Int) -> Int {\n    #if arch(x86_64) || arch(arm64)\n    let magic: UInt = 0x9e3779b97f4a7c15\n    #elseif arch(i386) || arch(arm)\n    let magic: UInt = 0x9e3779b9\n    #endif\n    var lhs = UInt(bitPattern: initial)\n    let rhs = UInt(bitPattern: other)\n    lhs ^= rhs &+ magic &+ (lhs << 6) &+ (lhs >> 2)\n    return Int(bitPattern: lhs)\n}"
    }
  ]
}