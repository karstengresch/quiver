{
  "title": "CoreData",
  "cells": [
    {
      "type": "text",
      "data": "save example (C in CRUD)"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "  func save(name: String) {\n    guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {\n      return\n    }\n    \n    let managedContext = appDelegate.persistentContainer.viewContext\n    let entity = NSEntityDescription.entity(forEntityName: \"Person\", in: managedContext)!\n    let person = NSManagedObject(entity: entity, insertInto: managedContext)\n    person.setValue(name, forKeyPath: \"name\")\n    \n    do {\n      try managedContext.save()\n      people.append(person)\n    } catch let error as NSError {\n      print(\"Coud not save. \\(error), \\(error.userInfo)\")\n    }\n  }"
    },
    {
      "type": "text",
      "data": "<div>fetch example (R in CRUD) -&gt; here for a table to load saved data</div>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "  override func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(true)\n    \n    guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {\n      return\n    }\n    \n    let managedContext = appDelegate.persistentContainer.viewContext\n    \n    let fetchRequest = NSFetchRequest<NSManagedObject>(entityName: \"Person\")\n    \n    do {\n      people =\n      try managedContext.fetch(fetchRequest)\n    } catch let error as NSError {\n      print(\"Coud not fetch. \\(error), \\(error.userInfo)\")\n    }\n  }"
    },
    {
      "type": "text",
      "data": "<div>Test Code in AppDelegate</div>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "   let bowtie = NSEntityDescription.insertNewObject(forEntityName: \"Bowtie\", into: self.persistentContainer.viewContext) as! Bowtie\n    bowtie.name = \"My bow tie\"\n    bowtie.lastWorn = NSDate()\n    \n    do {\n      let fetchRequest = NSFetchRequest<Bowtie>(entityName: \"Bowtie\")\n      let bowties =\n        \n        try self.persistentContainer.viewContext.fetch(fetchRequest)\n      \n      let sample = bowties.first\n      print(\"Name: \\(String(describing: sample?.name)), Worn: \\(String(describing: sample?.lastWorn))\")\n          \n      }  catch let error as NSError {\n        print(\"Fetching error \\(error), \\(error.userInfo)\")\n      }"
    },
    {
      "type": "text",
      "data": "Finally the real world code in AppDelegate"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n    \n    guard let rootViewController = window?.rootViewController as? ViewController else {\n      return true\n    }\n    \n    rootViewController.managedContext = persistentContainer.viewContext\n    \n    return true\n  }"
    },
    {
      "type": "text",
      "data": "<div>N.B. - persistentContainer is available because the CoreData checkbox was checked when creating the project. This is the generated code:</div>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "  // MARK: - Core Data stack\n  lazy var persistentContainer: NSPersistentContainer = {\n    /*\n     The persistent container for the application. This implementation\n     creates and returns a container, having loaded the store for the\n     application to it. This property is optional since there are legitimate\n     error conditions that could cause the creation of the store to fail.\n     */\n    let container = NSPersistentContainer(name: \"Bow_Ties\")\n    container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n      if let error = error as NSError? {\n        // Replace this implementation with code to handle the error appropriately.\n        // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.\n\n        /*\n         Typical reasons for an error here include:\n         * The parent directory does not exist, cannot be created, or disallows writing.\n         * The persistent store is not accessible, due to permissions or data protection when the device is locked.\n         * The device is out of space.\n         * The store could not be migrated to the current model version.\n         Check the error message to determine what the actual problem was.\n         */\n        fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n      }\n    })\n    return container\n  }()"
    },
    {
      "type": "text",
      "data": "<div><b>Five ways to set up a fetch request</b></div>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "// 1\rlet fetchRequest1 = NSFetchRequest<Venue>()\rlet entity = NSEntityDescription.entity(forEntityName: \"Venue\", in: managedContext)!\rfetchRequest1.entity = entity\r// 2\rlet fetchRequest2 = NSFetchRequest<Venue>(entityName: \"Venue\")\r// 3\rlet fetchRequest3: NSFetchRequest<Venue> = Venue.fetchRequest()\r// 4\rlet fetchRequest4 = managedObjectModel.fetchRequestTemplate(forName: \"venueFR\")\r// 5\rlet fetchRequest5 = managedObjectModel.fetchRequestFromTemplate(withName: \"venueFR\", substitutionVariables: [\"NAME\" : \"Vivi Bubble Tea\"])"
    }
  ]
}