{
  "title": "UITextView",
  "cells": [
    {
      "type": "text",
      "data": "<h3>Handle Tap</h3>"
    },
    {
      "type": "text",
      "data": "<h3>With UITapGestureRecognizer</h3>"
    },
    {
      "type": "text",
      "data": "<b>Setup</b> ( viewDidLoad() )"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "let tapRecognizer =  UITapGestureRecognizer(target: self, action: #selector(LearnViewController.handleTap(tapGesture:)))\nself.learnTextView.addGestureRecognizer(tapRecognizer)"
    },
    {
      "type": "text",
      "data": "<b>Very extensive version (from Gist)</b>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "  @objc func handleTap(tapGesture: UITapGestureRecognizer) {\n    Log.debug?.message(\"Link tapped\")\n    let textView: UITextView = tapGesture.view as! UITextView\n    let tapLocation = tapGesture.location(in: tapGesture.view)\n    \n    var textPosition1 = textView.closestPosition(to: tapLocation)\n    var textPosition2:UITextPosition?\n    if let _ = textPosition1 {\n      textPosition2 = textView.position(from: textPosition1!, offset: 1)\n      if let _ = textPosition2 {\n        textPosition1 = textView.position(from: textPosition1!, offset: -1)\n        textPosition2 = textView.position(from: textPosition1!, offset: 1)\n      } else  {\n        return\n      }\n    }\n\n    let range = textView.textRange(from: textPosition1!, to: textPosition2!)\n    let startOffset = textView.offset(from: textView.beginningOfDocument, to: range!.start)\n    let endOffset = textView.offset(from: textView.beginningOfDocument, to: range!.end)\n    let offsetRange = NSMakeRange(startOffset, endOffset - startOffset)\n    if offsetRange.location == NSNotFound || offsetRange.length == 0 {\n      return\n    }\n    \n    if NSMaxRange(offsetRange) > textView.attributedText.length {\n      return\n    }\n    \n    let attributedSubstring = textView.attributedText .attributedSubstring(from: offsetRange)\n    let link = attributedSubstring.attribute(NSAttributedStringKey.link, at: 0, effectiveRange: nil)\n    \n    if let _ = link {\n      Log.debug?.value(\"\\(String(describing: link))\")\n      return\n    }\n  }"
    },
    {
      "type": "text",
      "data": "<b>Smaller version (working)</b>"
    },
    {
      "type": "code",
      "language": "sh",
      "data": "  @objc func handleTap(tapGesture: UIGestureRecognizer) {\n    Log.debug?.message(\"Link tapped.\")\n\n      if let textView = tapGesture.view as? UITextView\n      {\n        let tapLocation = tapGesture.location(in: textView)\n        let textPosition = textView.closestPosition(to: tapLocation)\n        let attr: NSDictionary = textView.textStyling(at: textPosition!, in: UITextStorageDirection.forward)! as NSDictionary\n    \n        if let url: NSURL = attr[NSAttributedStringKey.link] as? NSURL {\n          // \n          Log.debug?.message(\"Link tapped for url: \\(url)\")\n        }\n    }\n  }"
    },
    {
      "type": "text",
      "data": "<h3>With UITextViewDelegate.shouldInteractWith URL</h3>"
    },
    {
      "type": "code",
      "language": "sh",
      "data": " func textView(_ textView: UITextView, shouldInteractWith URL: URL, in characterRange: NSRange, interaction: UITextItemInteraction) -> Bool {\n    Log.debug?.message(\"shouldInteractWith URL \\(URL)\")\n    \n    // Do something, e.g. extract URL.\n    \n    return true\n  }"
    },
    {
      "type": "text",
      "data": "<h2>Load HTML String</h2>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "let htmlString = \"<html>\" +\n        \"<head>\" +\n        \"<style>\" +\n        \"body {\" +\n        \"background-color: rgb(230, 230, 230);\" +\n        \"font-family: 'Arial';\" +\n        \"text-decoration:none;\" +\n        \"}\" +\n        \"</style>\" +\n        \"</head>\" +\n        \"<body>\" +\n        \"<h1>A title</h1>\" +\n        \"<p>A paragraph</p>\" +\n        \"<b>bold text</b>\" +\n    \"</body></head></html>\"\n\nlet htmlData = NSString(string: htmlString).data(using: String.Encoding.unicode.rawValue)\nlet options = [NSAttributedString.DocumentReadingOptionKey.documentType: NSAttributedString.DocumentType.html]\nlet attributedString = try! NSAttributedString(data: htmlData!, options: options, documentAttributes: nil)\ntextView.attributedText = attributedString"
    },
    {
      "type": "text",
      "data": "(Source:&nbsp;<a href=\"https://stackoverflow.com/questions/2454067/display-html-text-in-uitextview\">https://stackoverflow.com/questions/2454067/display-html-text-in-uitextview</a>)"
    },
    {
      "type": "text",
      "data": "<h3>NSMutableAttributedString from HTML\u0003</h3>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "extension NSMutableAttributedString {\n  internal convenience init?(html: String) {\n    guard let data = html.data(using: String.Encoding.utf16, allowLossyConversion: false) else {\n      return nil\n    }\n    \n    guard let attributedString = try?  NSMutableAttributedString(data: data, options: [.documentType: NSAttributedString.DocumentType.html, .characterEncoding: String.Encoding.utf8.rawValue], documentAttributes: nil) else {\n      return nil\n    }\n    \n    self.init(attributedString: attributedString)\n  }\n}"
    },
    {
      "type": "text",
      "data": "<h3>Data extension to NSAttributedString</h3>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "extension Data {\n    var attributedString: NSAttributedString? {\n        do {\n            return try NSAttributedString(data: self, options:[NSAttributedString.DocumentReadingOptionKey.documentType:NSAttributedString.DocumentType.html, NSAttributedString.DocumentReadingOptionKey.characterEncoding: String.Encoding.utf8.rawValue], documentAttributes: nil)\n        } catch let error as NSError {\n            print(error.localizedDescription)\n        }\n        return nil\n    }\n}"
    },
    {
      "type": "text",
      "data": "Source:&nbsp;<a href=\"https://stackoverflow.com/a/44917604/4295602\">https://stackoverflow.com/a/44917604/4295602</a>"
    },
    {
      "type": "text",
      "data": "<h3>Attach Image</h3>"
    },
    {
      "type": "code",
      "language": "sh",
      "data": "        let myImage = UIImage(named: \"myImage.png\")\n        Log.debug?.message(\"Bundle main URL: \\(Bundle.main.bundleURL)\")\n        let attachment: NSTextAttachment = NSTextAttachment()\n        attachment.image = myImage\n        let attrString: NSAttributedString = NSAttributedString(attachment: attachment)\n        self.myTextView.textStorage.append(attrString)"
    },
    {
      "type": "text",
      "data": "This b.t.w. would only append to the very end."
    },
    {
      "type": "text",
      "data": "<h3>Replace occurrences of whatever (e.g. HTML-Tags) - brute-force, fragile, but working.</h3>"
    },
    {
      "type": "code",
      "language": "sh",
      "data": "extension MyWhatever {\n  func replaceImgPath(_ htmlString: String) -> String {\n    var theReturnString = htmlString\n    let result = htmlString.slices(from: \"<img src=\\\"\", to: \"\\\"\")\n    let bundleUrl: String = Bundle.main.bundleURL.absoluteString\n    \n    result.forEach(\n      {\n        let fullTag = \"\".appending(bundleUrl).appending( $0 )\n        theReturnString = theReturnString.replacingOccurrences(of: $0, with: fullTag)\n      }\n    )\n    \n    return theReturnString\n  }\n}\n\n// Source: https://stackoverflow.com/a/46855903/4295602\nextension String {\n  func ranges(of string: String, options: CompareOptions = .literal) -> [Range<Index>] {\n    var result: [Range<Index>] = []\n    var start = startIndex\n    while let range = range(of: string, options: options, range: start..<endIndex) {\n      result.append(range)\n      start = range.lowerBound < range.upperBound ? range.upperBound : index(range.lowerBound, offsetBy: 1, limitedBy: endIndex) ?? endIndex\n    }\n    return result\n  }\n  func slices(from: String, to: String) -> [Substring] {\n    let pattern = \"(?<=\" + from + \").*?(?=\" + to + \")\"\n    return ranges(of: pattern, options: .regularExpression)\n      .map{ self[$0] }\n  }\n}\""
    },
    {
      "type": "text",
      "data": "<h3>Scroll to start programatically</h3>"
    },
    {
      "type": "code",
      "language": "sh",
      "data": "override func viewDidLayoutSubviews() {\n        super.viewDidLayoutSubviews()\n        textView.setContentOffset(CGPoint.zero, animated: false)\n    }"
    },
    {
      "type": "text",
      "data": "(source:&nbsp;<a href=\"https://stackoverflow.com/a/27769359/4295602\">https://stackoverflow.com/a/27769359/4295602</a>)"
    },
    {
      "type": "text",
      "data": "<h3>Pinch-To-Zoom</h3>"
    },
    {
      "type": "code",
      "language": "sh",
      "data": "  // Source https://gist.github.com/titopalito/fb9b45718a72f9b12c7abd519438d79a via https://stackoverflow.com/a/46508056/4295602\n  // Thanks for sharing!\n  var pinchGestureRecognizer : UIPinchGestureRecognizer!\n  \n  @objc func pinchGesture(gestureRecognizer: UIPinchGestureRecognizer ) {\n    Log.debug?.message(\"*** Pinch: Scale: \\(gestureRecognizer.scale) Velocity: \\(gestureRecognizer.velocity)\")\n    \n    let font = self.nsattributedStringTextView.font\n    var pointSize = font?.pointSize\n    let fontName = font?.fontName\n    \n    pointSize = ((gestureRecognizer.velocity > 0) ? 1 : -1) * 1 + pointSize!;\n    \n    if (pointSize! < 13) { pointSize = 13}\n    if (pointSize! > 42) { pointSize = 42}\n    \n    self.nsattributedStringTextView.font = UIFont(name: fontName!, size: pointSize!)\n    \n  }\n  \n  override func viewDidLoad() {\n    super.viewDidLoad()\n    \n    Log.verbose?.message(\"$$$$$$$$$$$$$$$ SessionPageViewController.viewDidLoad - markdownText: \\(markdownText)\")\n    \n    if let downParsed = try? Down(\n      markdownString: self.markdownText).toHTML() {\n      // Log.debug?.message(\"The string: \\(downParsed)\")\n      \n      let cssPath = Bundle.main.path(forResource: \"documentation_default\", ofType: \"css\")\n      let cssContent = try! String(contentsOfFile: cssPath!, encoding: String.Encoding.utf8)\n      // TODO Check possible optimization be externalizing/templating\n      let downExtended = \"\".appending(\"<html><head><style>\").appending(cssContent).appending(\"</style></head><body>\").appending(downParsed).appending(\"</body></html>\")\n      \n      let htmlData = NSString(string: downExtended).data(using: String.Encoding.unicode.rawValue)\n      let options = [NSAttributedString.DocumentReadingOptionKey.documentType: NSAttributedString.DocumentType.html]\n      let attributedString = try! NSAttributedString(data: htmlData!, options: options, documentAttributes: nil)\n      \n      self.nsattributedStringTextView.attributedText = attributedString\n      pinchGestureRecognizer = UIPinchGestureRecognizer(target: self, action: #selector(pinchGesture))\n      self.nsattributedStringTextView.addGestureRecognizer(pinchGestureRecognizer)\n\n      prepareTheme()\n      self.nsattributedStringTextView.setNeedsDisplay()\n    }"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}